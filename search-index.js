var searchIndex = {};
searchIndex["runas"] = {"doc":"This library implements basic support for running a command in an elevated context.","items":[[3,"Command","runas","A process builder for elevated execution",null,null],[11,"new","","Creates a new command type for a given program.",0,{"inputs":[{"name":"s"}],"output":{"name":"command"}}],[11,"arg","","Add an argument to pass to the program.",0,{"inputs":[{"name":"command"},{"name":"s"}],"output":{"name":"command"}}],[11,"args","","Add multiple arguments to pass to the program.",0,null],[11,"show","","Controls the visibility of the program on supported platforms.  The default is\nto launch the program visible.",0,{"inputs":[{"name":"command"},{"name":"bool"}],"output":{"name":"command"}}],[11,"gui","","Controls the GUI context.  The default behavior is to assume that the program is\nlaunched from a command line (not using a GUI).  This primarily controls how the\nelevation prompt is rendered.  On some platforms like Windows the elevation prompt\nis always a GUI element.",0,{"inputs":[{"name":"command"},{"name":"bool"}],"output":{"name":"command"}}],[11,"force_prompt","","Can disable the prompt forcing for supported platforms.  Mostly this allows sudo\non unix platforms to not prompt for a password.",0,{"inputs":[{"name":"command"},{"name":"bool"}],"output":{"name":"command"}}],[11,"status","","Executes a command as a child process, waiting for it to finish and\ncollecting its exit status.",0,{"inputs":[{"name":"command"}],"output":{"name":"result"}}]],"paths":[[3,"Command"]]};
initSearch(searchIndex);
